use crate::{metadata::Metadata, EmbeddedPath};

/// Provides full information about a path of an entry
pub trait EntryPath {
    /// The entry path
    fn path(&self) -> &'static EmbeddedPath;
}

/// Provides the file content
pub trait Content {
    /// Get the content of the file
    fn content(&self) -> &'static [u8];
}

/// Provides metadata of an entry   
pub trait Meta {
    /// Get the metadata of the entry
    fn metadata(&self) -> &'static Metadata;
}

/// A trait for accessing the number of direct children in a dir-like structure.
///
/// This trait provides a method to retrieve a constant value representing the number of
/// direct children
pub trait DirectChildCount {
    /// Returns the number of direct children in the current directory.
    ///
    /// If implementation is generated by the macro, this value is constant and determined at compile time
    fn direct_child_count(&self) -> usize;
}

/// A trait for accessing the total number of children, including nested subdirectories.
///
/// This trait provides a method to retrieve a value representing the total number
/// of children, including all nested subdirectories
pub trait RecursiveChildCount {
    /// Returns the total number of children, including nested subdirectories and their contents.
    ///
    /// If implementation is generated by the macro, this value is constant and determined at compile time
    fn recursive_child_count(&self) -> usize;
}

/// It's a marker trait, that indicates the current type is a child of `T` on the `LEVEL` level.
pub trait ChildOf<T, const LEVEL: usize> {}

#[cfg(feature = "md5")]
/// A trait for accessing the md5 hash of an entry
pub trait Md5Hash {
    /// Returns the md5 hash of an entry
    ///
    /// If implementation is generated by the macro, this value is `const` and computed at compile time
    fn md5(&self) -> &'static [u8; 16];
}

#[cfg(feature = "sha1")]
/// A trait for accessing the sha1 hash of an entry
pub trait Sha1Hash {
    /// Returns the sha1 hash of an entry
    ///
    /// If implementation is generated by the macro, this value is `const` and computed at compile time
    fn sha1(&self) -> &'static [u8; 20];
}

#[cfg(feature = "sha2")]
/// A trait for accessing the sha2 224 hash of an entry
pub trait Sha2_224Hash {
    /// Returns the sha2 224 hash of an entry
    ///
    /// If implementation is generated by the macro, this value is `const` and computed at compile time
    fn sha2_224(&self) -> &'static [u8; 28];
}

#[cfg(feature = "sha2")]
/// A trait for accessing the sha2 256 hash of an entry
pub trait Sha2_256Hash {
    /// Returns the sha2 256 hash of an entry
    ///
    /// If implementation is generated by the macro, this value is `const` and computed at compile time
    fn sha2_256(&self) -> &'static [u8; 32];
}

#[cfg(feature = "sha2")]
/// A trait for accessing the sha2 384 hash of an entry
pub trait Sha2_384Hash {
    /// Returns the sha2 384 hash of an entry
    ///
    /// If implementation is generated by the macro, this value is `const` and computed at compile time
    fn sha2_384(&self) -> &'static [u8; 48];
}

#[cfg(feature = "sha2")]
/// A trait for accessing the sha2 512 hash of an entry
pub trait Sha2_512Hash {
    /// Returns the sha2 512 hash of an entry
    ///
    /// If implementation is generated by the macro, this value is `const` and computed at compile time
    fn sha2_512(&self) -> &'static [u8; 64];
}

#[cfg(feature = "sha3")]
/// A trait for accessing the sha3 224 hash of an entry
pub trait Sha3_224Hash {
    /// Returns the sha3 224 hash of an entry
    ///
    /// If implementation is generated by the macro, this value is `const` and computed at compile time
    fn sha3_224(&self) -> &'static [u8; 28];
}

#[cfg(feature = "sha3")]
/// A trait for accessing the sha3 256 hash of an entry
pub trait Sha3_256Hash {
    /// Returns the sha3 256 hash of an entry
    ///
    /// If implementation is generated by the macro, this value is `const` and computed at compile time
    fn sha3_256(&self) -> &'static [u8; 32];
}

#[cfg(feature = "sha3")]
/// A trait for accessing the sha3 384 hash of an entry
pub trait Sha3_384Hash {
    /// Returns the sha3 384 hash of an entry
    ///
    /// If implementation is generated by the macro, this value is `const` and computed at compile time
    fn sha3_384(&self) -> &'static [u8; 48];
}

#[cfg(feature = "sha3")]
/// A trait for accessing the sha3 512 hash of an entry
pub trait Sha3_512Hash {
    /// Returns the sha3 512 hash of an entry
    ///
    /// If implementation is generated by the macro, this value is `const` and computed at compile time
    fn sha3_512(&self) -> &'static [u8; 64];
}

#[cfg(feature = "blake3")]
/// A trait for accessing the blake3 256 hash of an entry
pub trait Blake3_256Hash {
    /// Returns the blake3 256 hash of an entry
    ///
    /// If implementation is generated by the macro, this value is `const` and computed at compile time
    fn blake3_256(&self) -> &'static [u8; 32];
}
