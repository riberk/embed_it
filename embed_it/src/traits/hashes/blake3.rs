pub trait Blake3HashSelector {
    type Tag: TryFrom<usize>;
    fn select_blake3(&self, tag: Self::Tag) -> &'static [u8];
    fn select_blake3_by_bits(&self, bits: usize) -> Option<&'static [u8]> {
        Self::Tag::try_from(bits).ok().map(|tag| &self.select_blake3(tag))
    }
}

/// A trait for accessing the blake3 hash with `B` **bytes** (not bits) len
pub trait Blake3Hash<const B: usize> {
    /// Returns the blake3 hash with `B` len
    /// 
    /// If an implementation is generated by the macro, this value is `const` and computed at compile time 
    fn blake3(&self) -> &'static [u8; B];
}
